<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>每日一道算法题：「两个数组的交集」</title>
      <link href="/2023/03/14/algorithm/everyday-0007/"/>
      <url>/2023/03/14/algorithm/everyday-0007/</url>
      
        <content type="html"><![CDATA[<h2 id="题目：两个数组的交集"><a href="#题目：两个数组的交集" class="headerlink" title="题目：两个数组的交集"></a>题目：两个数组的交集</h2><h3 id="给你两个整数数组-nums1-和-nums2-，请你以数组形式返回两数组的交集。返回结果中每个元素出现的次数，应与元素在两个数组中都出现的次数一致（如果出现次数不一致，则考虑取较小值）。可以不考虑输出结果的顺序。"><a href="#给你两个整数数组-nums1-和-nums2-，请你以数组形式返回两数组的交集。返回结果中每个元素出现的次数，应与元素在两个数组中都出现的次数一致（如果出现次数不一致，则考虑取较小值）。可以不考虑输出结果的顺序。" class="headerlink" title="给你两个整数数组 nums1 和 nums2 ，请你以数组形式返回两数组的交集。返回结果中每个元素出现的次数，应与元素在两个数组中都出现的次数一致（如果出现次数不一致，则考虑取较小值）。可以不考虑输出结果的顺序。"></a>给你两个整数数组 nums1 和 nums2 ，请你以数组形式返回两数组的交集。返回结果中每个元素出现的次数，应与元素在两个数组中都出现的次数一致（如果出现次数不一致，则考虑取较小值）。可以不考虑输出结果的顺序。</h3><h3 id="例1："><a href="#例1：" class="headerlink" title="例1："></a>例1：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = [1,2,2,1], nums2 = [2,2]</span><br><span class="line">输出：[2,2]</span><br></pre></td></tr></table></figure><h3 id="例2："><a href="#例2：" class="headerlink" title="例2："></a>例2：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = [4,9,5], nums2 = [9,4,9,8,4]</span><br><span class="line">输出：[4,9]</span><br></pre></td></tr></table></figure><h3 id="解："><a href="#解：" class="headerlink" title="解："></a>解：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public int[] intersect(int[] nums1, int[] nums2)&#123;</span><br><span class="line">    Arrays.sort(nums1);</span><br><span class="line">    Arrays.sort(nums2);</span><br><span class="line">    int i = 0;</span><br><span class="line">    int j = 0;</span><br><span class="line">    List&lt;Integer&gt; list = new ArrayList();</span><br><span class="line">    while( i &lt; nums1.lentsh &amp;&amp; j &lt; nums2.length) &#123;</span><br><span class="line">      int num1 = nums1[i];</span><br><span class="line">      int num2 = nums2[j];</span><br><span class="line">      if (num1 &lt; num2)&#123;</span><br><span class="line">        i++;</span><br><span class="line">      &#125; else if (num1 &gt; num2)&#123;</span><br><span class="line">        j++;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        list.add(num1);</span><br><span class="line">        j++;</span><br><span class="line">        i++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    int[] results = new int[list.size()];</span><br><span class="line">    for(int k = 0; k &lt; list.size(); k++ )&#123;</span><br><span class="line">      int[k] = list.get(k);</span><br><span class="line">    &#125;</span><br><span class="line">    return results;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>好好学习，天天向上</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日一道算法题：「两数之和」</title>
      <link href="/2023/03/13/algorithm/everyday-0008/"/>
      <url>/2023/03/13/algorithm/everyday-0008/</url>
      
        <content type="html"><![CDATA[<h2 id="题目：两数之和"><a href="#题目：两数之和" class="headerlink" title="题目：两数之和"></a>题目：两数之和</h2><h3 id="给定一个整数数组-nums-和一个整数目标值-target，请你在该数组中找出-和为目标值-target-的那-两个-整数，并返回它们的数组下标"><a href="#给定一个整数数组-nums-和一个整数目标值-target，请你在该数组中找出-和为目标值-target-的那-两个-整数，并返回它们的数组下标" class="headerlink" title="给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标"></a>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标</h3><h3 id="你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。"><a href="#你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。" class="headerlink" title="你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。"></a>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</h3><h3 id="你可以按任意顺序返回答案"><a href="#你可以按任意顺序返回答案" class="headerlink" title="你可以按任意顺序返回答案"></a>你可以按任意顺序返回答案</h3><h3 id="例1："><a href="#例1：" class="headerlink" title="例1："></a>例1：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,7,11,15], target = 9</span><br><span class="line">输出：[0,1]</span><br><span class="line">解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</span><br></pre></td></tr></table></figure><h3 id="例2："><a href="#例2：" class="headerlink" title="例2："></a>例2：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,2,4], target = 6</span><br><span class="line">输出：[1,2]</span><br></pre></td></tr></table></figure><h3 id="解："><a href="#解：" class="headerlink" title="解："></a>解：</h3><p>遍历过的结果都存放在map中，之后的每个数都和目标数求差去map中get</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static int[] twoSum(int[] nums, int target) &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">        for (int i = 0; i &lt; nums.length; i++) &#123;</span><br><span class="line">            if (map.containsKey(target - nums[i])) &#123;</span><br><span class="line">                return new int[]&#123;map.get(target - nums[i]), i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        return new int[]&#123;-1, -1&#125;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><p>好好学习，天天向上</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言常用命令</title>
      <link href="/2022/12/13/go/common_commands/"/>
      <url>/2022/12/13/go/common_commands/</url>
      
        <content type="html"><![CDATA[<blockquote><p>go run : 编译并运行Go程序</p></blockquote><blockquote><p>go list : 列出当前全部安装的package</p></blockquote><blockquote><p>go env : 查看当前go的环境变量</p></blockquote><blockquote><p>go version : 查看go当前的版本</p></blockquote><blockquote><p>go fix : 用来修复以前老版本的代码到新版本，例如go1之前老版本的代码转化到go1</p></blockquote><blockquote><p>go test : 命令，会自动读取源码目录下面名为*_test.go的文件，生成并运行测试用的可执行文件。</p></blockquote><blockquote><p>go get : 命令主要是用来动态获取远程代码包的，目前支持的有BitBucket、GitHub、Google Code和Launchpad。</p></blockquote><blockquote><p>go fmt : 命令主要是用来帮你格式化所写好的代码文件。</p></blockquote><blockquote><p>go clean : 命令是用来移除当前源码包里面编译生成的文件</p></blockquote><blockquote><p>go build : 命令主要是用于测试编译。</p></blockquote><hr><p>好好学习，天天向上</p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> go常用命令 </tag>
            
            <tag> go入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日一道算法题：「移动零」</title>
      <link href="/2022/12/13/algorithm/everyday-0006/"/>
      <url>/2022/12/13/algorithm/everyday-0006/</url>
      
        <content type="html"><![CDATA[<h2 id="题目：移动零"><a href="#题目：移动零" class="headerlink" title="题目：移动零"></a>题目：移动零</h2><h3 id="给定一个数组-nums，编写一个函数将所有-0-移动到数组的末尾，同时保持非零元素的相对顺序。"><a href="#给定一个数组-nums，编写一个函数将所有-0-移动到数组的末尾，同时保持非零元素的相对顺序。" class="headerlink" title="给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。"></a>给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。</h3><h3 id="请注意-，必须在不复制数组的情况下原地对数组进行操作。"><a href="#请注意-，必须在不复制数组的情况下原地对数组进行操作。" class="headerlink" title="请注意 ，必须在不复制数组的情况下原地对数组进行操作。"></a>请注意 ，必须在不复制数组的情况下原地对数组进行操作。</h3><h3 id="例1："><a href="#例1：" class="headerlink" title="例1："></a>例1：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [0,1,0,3,12]</span><br><span class="line">输出: [1,3,12,0,0]</span><br></pre></td></tr></table></figure><h3 id="例2："><a href="#例2：" class="headerlink" title="例2："></a>例2：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [0]</span><br><span class="line">输出: [0]</span><br></pre></td></tr></table></figure><h3 id="解："><a href="#解：" class="headerlink" title="解："></a>解：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public void moveZeroes(int[] nums) &#123;</span><br><span class="line">    //定义一个记录 0 位置的下标</span><br><span class="line">    int i = 0;</span><br><span class="line">    for (int j = 0; j &lt; nums.length; j++) &#123;</span><br><span class="line">        //遍历整个数组寻找不为0的数</span><br><span class="line">        if (nums[j] != 0) &#123;</span><br><span class="line">            //找到不为0的数，取到i位置的0与数字互换</span><br><span class="line">            int temp = nums[i];</span><br><span class="line">            nums[i] = nums[j];</span><br><span class="line">            nums[j] = temp;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>好好学习，天天向上</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日一道算法题：「加一」</title>
      <link href="/2022/12/12/algorithm/everyday-0005/"/>
      <url>/2022/12/12/algorithm/everyday-0005/</url>
      
        <content type="html"><![CDATA[<h2 id="题目：加一"><a href="#题目：加一" class="headerlink" title="题目：加一"></a>题目：加一</h2><h3 id="给定一个由-整数-组成的-非空-数组所表示的非负整数，在该数的基础上加一。最高位数字存放在数组的首位，-数组中每个元素只存储单个数字。你可以假设除了整数-0-之外，这个整数不会以零开头。"><a href="#给定一个由-整数-组成的-非空-数组所表示的非负整数，在该数的基础上加一。最高位数字存放在数组的首位，-数组中每个元素只存储单个数字。你可以假设除了整数-0-之外，这个整数不会以零开头。" class="headerlink" title="给定一个由 整数 组成的 非空 数组所表示的非负整数，在该数的基础上加一。最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。你可以假设除了整数 0 之外，这个整数不会以零开头。"></a>给定一个由 整数 组成的 非空 数组所表示的非负整数，在该数的基础上加一。最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。你可以假设除了整数 0 之外，这个整数不会以零开头。</h3><h3 id="例1："><a href="#例1：" class="headerlink" title="例1："></a>例1：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：digits = [1,2,3]</span><br><span class="line">输出：[1,2,4]</span><br><span class="line">解释：输入数组表示数字 123。</span><br></pre></td></tr></table></figure><h3 id="例2："><a href="#例2：" class="headerlink" title="例2："></a>例2：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：digits = [4,3,2,1]</span><br><span class="line">输出：[4,3,2,2]</span><br><span class="line">解释：输入数组表示数字 4321。</span><br></pre></td></tr></table></figure><h3 id="解："><a href="#解：" class="headerlink" title="解："></a>解：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public int[] plusOne(int[] digits) &#123;</span><br><span class="line">    //倒着遍历数组</span><br><span class="line">    for (int i = digits.length - 1; i &gt;= 0; i--) &#123;</span><br><span class="line">        //当前位置的数字不等于9就+1返回</span><br><span class="line">        if (digits[i] != 9) &#123;</span><br><span class="line">            digits[i]++;</span><br><span class="line">            return digits;</span><br><span class="line">        &#125;</span><br><span class="line">        //等于9的情况 + 1，当前位置就为0</span><br><span class="line">        digits[i] = 0;</span><br><span class="line">    &#125;</span><br><span class="line">    //如果所有数字都是9，那就新创建数组，长度加 1</span><br><span class="line">    int[] result = new int[digits.length + 1];</span><br><span class="line">    //把第一位赋值为1</span><br><span class="line">    result[0] = 1;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>好好学习，天天向上</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日一道算法题：「从尾到头打印链表」</title>
      <link href="/2022/12/11/algorithm/everyday-0004/"/>
      <url>/2022/12/11/algorithm/everyday-0004/</url>
      
        <content type="html"><![CDATA[<h2 id="题目：从尾到头打印链表"><a href="#题目：从尾到头打印链表" class="headerlink" title="题目：从尾到头打印链表"></a>题目：从尾到头打印链表</h2><h3 id="输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。"><a href="#输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。" class="headerlink" title="输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。"></a>输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。</h3><h3 id="例1："><a href="#例1：" class="headerlink" title="例1："></a>例1：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,3,2]</span><br><span class="line">输出：[2,3,1]</span><br></pre></td></tr></table></figure><h3 id="解："><a href="#解：" class="headerlink" title="解："></a>解：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public int[] reversePrint(ListNode head) &#123;</span><br><span class="line">    //先统计一下链表长度，用来创建数组</span><br><span class="line">    int count = 0;</span><br><span class="line">    ListNode node = head;</span><br><span class="line">    while (node != null) &#123;</span><br><span class="line">        count++;</span><br><span class="line">        node = node.next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //遍历链表然后从数组尾部插入</span><br><span class="line">    int[] allArr = new int[count];</span><br><span class="line">    node = head;</span><br><span class="line">    while (node != null) &#123;</span><br><span class="line">        allArr[count - 1] = node.val;</span><br><span class="line">        count--;</span><br><span class="line">        node = node.next;</span><br><span class="line">    &#125;</span><br><span class="line">    return allArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>好好学习，天天向上</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日一道算法题：「判断一个数字是否可以表示成三的幂的和」</title>
      <link href="/2022/12/10/algorithm/everyday-0003/"/>
      <url>/2022/12/10/algorithm/everyday-0003/</url>
      
        <content type="html"><![CDATA[<h2 id="题目：判断一个数字是否可以表示成三的幂的和"><a href="#题目：判断一个数字是否可以表示成三的幂的和" class="headerlink" title="题目：判断一个数字是否可以表示成三的幂的和"></a>题目：判断一个数字是否可以表示成三的幂的和</h2><h3 id="给你一个整数-n-，如果你可以将-n-表示成若干个不同的三的幂之和，请你返回-true-，否则请返回-false-。对于一个整数-y-，如果存在整数-x-满足-y-x3D-x3D-3x-，我们称这个整数-y-是三的幂。"><a href="#给你一个整数-n-，如果你可以将-n-表示成若干个不同的三的幂之和，请你返回-true-，否则请返回-false-。对于一个整数-y-，如果存在整数-x-满足-y-x3D-x3D-3x-，我们称这个整数-y-是三的幂。" class="headerlink" title="给你一个整数 n ，如果你可以将 n 表示成若干个不同的三的幂之和，请你返回 true ，否则请返回 false 。对于一个整数 y ，如果存在整数 x 满足 y &#x3D;&#x3D; 3x ，我们称这个整数 y 是三的幂。"></a>给你一个整数 n ，如果你可以将 n 表示成若干个不同的三的幂之和，请你返回 true ，否则请返回 false 。对于一个整数 y ，如果存在整数 x 满足 y &#x3D;&#x3D; 3x ，我们称这个整数 y 是三的幂。</h3><h3 id="例1："><a href="#例1：" class="headerlink" title="例1："></a>例1：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 12</span><br><span class="line">输出：true</span><br><span class="line">解释：12 = 31 + 32</span><br></pre></td></tr></table></figure><h3 id="例2："><a href="#例2：" class="headerlink" title="例2："></a>例2：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 91</span><br><span class="line">输出：true</span><br><span class="line">解释：91 = 30 + 32 + 34</span><br></pre></td></tr></table></figure><h3 id="解："><a href="#解：" class="headerlink" title="解："></a>解：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public boolean checkPowersOfThree(int i) &#123;</span><br><span class="line">    //如果一个数字可以表示成三的幂的和，那么这个数字转换为三进制后，数字应该只有0和1</span><br><span class="line">    while (i &gt; 0) &#123;</span><br><span class="line">        //如果余数大于1直接返回false</span><br><span class="line">        if (i % 3 &gt; 1) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        i = i / 3;</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>好好学习，天天向上</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日一道算法题：「二维数组中的查找」</title>
      <link href="/2022/12/09/algorithm/everyday-0002/"/>
      <url>/2022/12/09/algorithm/everyday-0002/</url>
      
        <content type="html"><![CDATA[<h2 id="题目：二维数组中的查找"><a href="#题目：二维数组中的查找" class="headerlink" title="题目：二维数组中的查找"></a>题目：二维数组中的查找</h2><h3 id="在一个-n-m-的二维数组中，每一行都按照从左到右-非递减-的顺序排序，每一列都按照从上到下-非递减-的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。"><a href="#在一个-n-m-的二维数组中，每一行都按照从左到右-非递减-的顺序排序，每一列都按照从上到下-非递减-的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。" class="headerlink" title="在一个 n * m 的二维数组中，每一行都按照从左到右 非递减 的顺序排序，每一列都按照从上到下 非递减 的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。"></a>在一个 n * m 的二维数组中，每一行都按照从左到右 非递减 的顺序排序，每一列都按照从上到下 非递减 的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</h3><h3 id="例："><a href="#例：" class="headerlink" title="例："></a>例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line"> [1,   4,  7, 11, 15],</span><br><span class="line"> [2,   5,  8, 12, 19],</span><br><span class="line"> [3,   6,  9, 16, 22],</span><br><span class="line"> [10, 13, 14, 17, 24],</span><br><span class="line"> [18, 21, 23, 26, 30]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>给定 target &#x3D; 5，返回 true。<br>给定 target &#x3D; 20，返回 false。</p><h3 id="offer-离我远去解法："><a href="#offer-离我远去解法：" class="headerlink" title="offer 离我远去解法："></a>offer 离我远去解法：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public boolean findNumberIn2DArray(int[][] matrix, int target) &#123;</span><br><span class="line">        for (int i = 0; i &lt; matrix.length; i++) &#123;</span><br><span class="line">            for (int j = 0; j &lt; matrix[i].length; j++) &#123;</span><br><span class="line">                if (matrix[i][j] == target) &#123;</span><br><span class="line">                    return true;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="解："><a href="#解：" class="headerlink" title="解："></a>解：</h3><p>从矩阵的右上角开始遍历</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public boolean findNumberIn2DArray(int[][] matrix, int target) &#123;</span><br><span class="line">        if (matrix.length == 0 || matrix[0].length == 0) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        int row = 0;</span><br><span class="line">        int col = matrix[0].length - 1;</span><br><span class="line">        while (row &lt; matrix.length &amp;&amp; col &gt;= 0) &#123;</span><br><span class="line">            </span><br><span class="line">            if (matrix[row][col] &gt; target) &#123;</span><br><span class="line">                //当前值大于目标值就列下标-1</span><br><span class="line">                col--;</span><br><span class="line">            &#125; else if (matrix[row][col] &lt; target) &#123;</span><br><span class="line">                //当前值小于目标值就行下标-1</span><br><span class="line">                row++;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><p>好好学习，天天向上</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日一道算法题：「找出数组中重复的数字」</title>
      <link href="/2022/12/08/algorithm/everyday-0001/"/>
      <url>/2022/12/08/algorithm/everyday-0001/</url>
      
        <content type="html"><![CDATA[<h2 id="题目：找出数组中重复的数字。"><a href="#题目：找出数组中重复的数字。" class="headerlink" title="题目：找出数组中重复的数字。"></a>题目：找出数组中重复的数字。</h2><h3 id="在一个长度为-n-的数组-nums-里的所有数字都在-0～n-1-的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。"><a href="#在一个长度为-n-的数组-nums-里的所有数字都在-0～n-1-的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。" class="headerlink" title="在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。"></a>在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</h3><h3 id="例："><a href="#例：" class="headerlink" title="例："></a>例：</h3><blockquote><p>输入：[2,3,1,0,2,5,3]</p><p>输出：2 或 3</p></blockquote><h3 id="解："><a href="#解：" class="headerlink" title="解："></a>解：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int findRepeatNumber(int[] nums) &#123;</span><br><span class="line">    </span><br><span class="line">        //创建一个同等长度的数组当做Map使用</span><br><span class="line">        int[] arr = new int[nums.length];</span><br><span class="line">        </span><br><span class="line">        for(int i = 0; i &lt; nums.length; i++) &#123;</span><br><span class="line">        </span><br><span class="line">            //因为[所有数字都在 0～n-1 的范围内]，新数组把遍历过的数字当做下标++</span><br><span class="line">            arr[nums[i]]++;</span><br><span class="line">            </span><br><span class="line">            //如果当前数字所在下标大于1表示重复</span><br><span class="line">            if (arr[nums[i]] &gt; 1) &#123;</span><br><span class="line">            </span><br><span class="line">                //直接返回该数字</span><br><span class="line">                return nums[i];</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        //否则返回-1</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>好好学习，天天向上</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
